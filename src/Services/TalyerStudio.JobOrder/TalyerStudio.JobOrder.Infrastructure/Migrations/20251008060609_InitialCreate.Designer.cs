// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using TalyerStudio.JobOrder.Infrastructure.Data;

#nullable disable

namespace TalyerStudio.JobOrder.Infrastructure.Migrations
{
    [DbContext(typeof(JobOrderDbContext))]
    [Migration("20251008060609_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("TalyerStudio.JobOrder.Domain.Entities.JobOrder", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.PrimitiveCollection<string[]>("AfterPhotos")
                        .IsRequired()
                        .HasColumnType("text[]")
                        .HasColumnName("after_photos");

                    b.PrimitiveCollection<Guid[]>("AssignedMechanicIds")
                        .IsRequired()
                        .HasColumnType("uuid[]")
                        .HasColumnName("assigned_mechanic_ids");

                    b.PrimitiveCollection<string[]>("BeforePhotos")
                        .IsRequired()
                        .HasColumnType("text[]")
                        .HasColumnName("before_photos");

                    b.Property<Guid?>("BranchId")
                        .HasColumnType("uuid")
                        .HasColumnName("branch_id");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("NOW()");

                    b.Property<string>("CustomerComplaints")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("customer_complaints");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uuid")
                        .HasColumnName("customer_id");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<decimal>("DiscountAmount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18,2)")
                        .HasDefaultValue(0m)
                        .HasColumnName("discount_amount");

                    b.Property<DateTime?>("EndTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("end_time");

                    b.Property<DateTime?>("EstimatedCompletionTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("estimated_completion_time");

                    b.Property<decimal>("GrandTotal")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("grand_total");

                    b.Property<string>("InspectionNotes")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("inspection_notes");

                    b.Property<string>("JobOrderNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("job_order_number");

                    b.Property<int>("OdometerReading")
                        .HasColumnType("integer")
                        .HasColumnName("odometer_reading");

                    b.Property<string>("Priority")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("priority");

                    b.Property<DateTime?>("StartTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("start_time");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("status");

                    b.Property<decimal>("TaxAmount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18,2)")
                        .HasDefaultValue(0m)
                        .HasColumnName("tax_amount");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uuid")
                        .HasColumnName("tenant_id");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("total_amount");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("NOW()");

                    b.Property<Guid>("VehicleId")
                        .HasColumnType("uuid")
                        .HasColumnName("vehicle_id");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId")
                        .HasDatabaseName("idx_job_orders_customer_id");

                    b.HasIndex("JobOrderNumber")
                        .IsUnique()
                        .HasDatabaseName("idx_job_orders_number");

                    b.HasIndex("Status")
                        .HasDatabaseName("idx_job_orders_status");

                    b.HasIndex("TenantId")
                        .HasDatabaseName("idx_job_orders_tenant_id");

                    b.HasIndex("VehicleId")
                        .HasDatabaseName("idx_job_orders_vehicle_id");

                    b.HasIndex("TenantId", "Status")
                        .HasDatabaseName("idx_job_orders_tenant_status");

                    b.ToTable("job_orders", (string)null);
                });

            modelBuilder.Entity("TalyerStudio.JobOrder.Domain.Entities.JobOrderItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("NOW()");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("description");

                    b.Property<Guid>("JobOrderId")
                        .HasColumnType("uuid")
                        .HasColumnName("job_order_id");

                    b.Property<string>("Notes")
                        .HasColumnType("text")
                        .HasColumnName("notes");

                    b.Property<int>("Quantity")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(1)
                        .HasColumnName("quantity");

                    b.Property<Guid>("ServiceId")
                        .HasColumnType("uuid")
                        .HasColumnName("service_id");

                    b.Property<string>("ServiceName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("service_name");

                    b.Property<decimal>("Subtotal")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("subtotal");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("unit_price");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("NOW()");

                    b.HasKey("Id");

                    b.HasIndex("JobOrderId")
                        .HasDatabaseName("idx_job_order_items_job_order_id");

                    b.HasIndex("ServiceId")
                        .HasDatabaseName("idx_job_order_items_service_id");

                    b.ToTable("job_order_items", (string)null);
                });

            modelBuilder.Entity("TalyerStudio.JobOrder.Domain.Entities.JobOrderPart", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("NOW()");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<Guid>("JobOrderId")
                        .HasColumnType("uuid")
                        .HasColumnName("job_order_id");

                    b.Property<string>("Notes")
                        .HasColumnType("text")
                        .HasColumnName("notes");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid")
                        .HasColumnName("product_id");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("product_name");

                    b.Property<string>("ProductSku")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("product_sku");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer")
                        .HasColumnName("quantity");

                    b.Property<decimal>("Subtotal")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("subtotal");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("unit_price");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("NOW()");

                    b.HasKey("Id");

                    b.HasIndex("JobOrderId")
                        .HasDatabaseName("idx_job_order_parts_job_order_id");

                    b.HasIndex("ProductId")
                        .HasDatabaseName("idx_job_order_parts_product_id");

                    b.ToTable("job_order_parts", (string)null);
                });

            modelBuilder.Entity("TalyerStudio.JobOrder.Domain.Entities.JobOrderItem", b =>
                {
                    b.HasOne("TalyerStudio.JobOrder.Domain.Entities.JobOrder", "JobOrder")
                        .WithMany("Items")
                        .HasForeignKey("JobOrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("JobOrder");
                });

            modelBuilder.Entity("TalyerStudio.JobOrder.Domain.Entities.JobOrderPart", b =>
                {
                    b.HasOne("TalyerStudio.JobOrder.Domain.Entities.JobOrder", "JobOrder")
                        .WithMany("Parts")
                        .HasForeignKey("JobOrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("JobOrder");
                });

            modelBuilder.Entity("TalyerStudio.JobOrder.Domain.Entities.JobOrder", b =>
                {
                    b.Navigation("Items");

                    b.Navigation("Parts");
                });
#pragma warning restore 612, 618
        }
    }
}
